@model IEnumerable<ProyectoTareas.Models.Tarea>

@{
    ViewBag.Title = "Index";
}

<h3>Resumen de Tareas</h3>
<p>
    @Html.ActionLink("Iniciar Worker", "IniciarWorker", null, new { @class = "btn btn-primary" })
</p>
@if (TempData["MensajeWorker"] != null)
{
    <div class="alert alert-success">
        @TempData["MensajeWorker"]
    </div>
}


<div id="resumen-tareas">
    @Html.Action("ResumenTareas")
</div>
<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
</p>
<div id="tabla-tareas">
    @Html.Partial("_TablaTareas", Model)
</div>

@section Scripts {
    <script>
        async function actualizarTabla() {
            try {
                const response = await fetch('@Url.Action("TablaTareas", "Tarea")');
                if (response.ok) {
                    const html = await response.text();
                    document.getElementById("tabla-tareas").innerHTML = html;
                } else {
                    console.error("Error al cargar la tabla:", response.status);
                }
            } catch (error) {
                console.error("Error en la solicitud Fetch:", error);
            }
        }

        async function actualizarResumen() {
            try {
                const response = await fetch('@Url.Action("ResumenTareas", "Tarea")');
                if (response.ok) {
                    const html = await response.text();
                    document.getElementById("resumen-tareas").innerHTML = html;
                } else {
                    console.error("Error al cargar el resumen:", response.status);
                }
            } catch (error) {
                console.error("Error en la solicitud Fetch:", error);
            }
        }

        setInterval(() => {
            actualizarTabla();
            actualizarResumen();
        }, 2000);
    </script>
}


